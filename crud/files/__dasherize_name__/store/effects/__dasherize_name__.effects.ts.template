import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap, of } from 'rxjs';
import * as {{ classify_name }}Actions from '../actions/{{ dasherize_name }}.actions';
import { {{ classify_name }}ApiService } from '../../services/{{ dasherize_name }}-api.service';

@Injectable()
export class {{ classify_name }}Effects {
  constructor(private actions$: Actions, private service: {{ classify_name }}ApiService) {}

  load$ = createEffect(() =>
    this.actions$.pipe(
      ofType({{ classify_name }}Actions.load{{ classify_name }}s),
      mergeMap(action =>
        this.service.getAll(action.limit, action.offset).pipe(
          map(res =>
            {{ classify_name }}Actions.load{{ classify_name }}sSuccess({ data: res.data, total: res.total })
          ),
          catchError(err =>
            of({{ classify_name }}Actions.load{{ classify_name }}sFailure({ error: err.message }))
          )
        )
      )
    )
  );

  loadById$ = createEffect(() =>
    this.actions$.pipe(
      ofType({{ classify_name }}Actions.load{{ classify_name }}ById),
      mergeMap(action =>
        this.service.getById(action.id).pipe(
          map(data => {{ classify_name }}Actions.load{{ classify_name }}ByIdSuccess({ data })),
          catchError(err =>
            of({{ classify_name }}Actions.load{{ classify_name }}ByIdFailure({ error: err.message }))
          )
        )
      )
    )
  );

  add$ = createEffect(() =>
    this.actions$.pipe(
      ofType({{ classify_name }}Actions.add{{ classify_name }}),
      mergeMap(action =>
        this.service.create(action.data).pipe(
          map(data => {{ classify_name }}Actions.add{{ classify_name }}Success({ data })),
          catchError(err =>
            of({{ classify_name }}Actions.add{{ classify_name }}Failure({ error: err.message }))
        )
      )
    )
  );

  update$ = createEffect(() =>
    this.actions$.pipe(
      ofType({{ classify_name }}Actions.update{{ classify_name }}),
      mergeMap(action =>
        this.service.update(action.id, action.data).pipe(
          mergeMap(() => this.service.getById(action.id)),
          map(data => {{ classify_name }}Actions.update{{ classify_name }}Success({ data })),
          catchError(err =>
            of({{ classify_name }}Actions.update{{ classify_name }}Failure({ error: err.message }))
        )
      )
    )
  );

  delete$ = createEffect(() =>
    this.actions$.pipe(
      ofType({{ classify_name }}Actions.delete{{ classify_name }}),
      mergeMap(action =>
        this.service.delete(action.id).pipe(
          map(() => {{ classify_name }}Actions.delete{{ classify_name }}Success({ id: action.id })),
          catchError(err =>
            of({{ classify_name }}Actions.delete{{ classify_name }}Failure({ error: err.message }))
        )
      )
    )
  );
}
