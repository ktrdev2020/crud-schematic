import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap, of } from 'rxjs';
import * as <%= classify(name) %>Actions from '../actions/<%= dasherize(name) %>.actions';
import { <%= classify(name) %>ApiService } from '../../services/<%= dasherize(name) %>-api.service';

@Injectable()
export class <%= classify(name) %>Effects {
  constructor(private actions$: Actions, private service: <%= classify(name) %>ApiService) {}

  load$ = createEffect(() =>
    this.actions$.pipe(
      ofType(<%= classify(name) %>Actions.load<%= classify(name) %>s),
      mergeMap(action =>
        this.service.getAll(action.limit, action.offset).pipe(
          map(res =>
            <%= classify(name) %>Actions.load<%= classify(name) %>sSuccess({ data: res.data, total: res.total })
          ),
          catchError(err =>
            of(<%= classify(name) %>Actions.load<%= classify(name) %>sFailure({ error: err.message }))
          )
        )
      )
    )
  );

  loadById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(<%= classify(name) %>Actions.load<%= classify(name) %>ById),
      mergeMap(action =>
        this.service.getById(action.id).pipe(
          map(data => <%= classify(name) %>Actions.load<%= classify(name) %>ByIdSuccess({ data })),
          catchError(err =>
            of(<%= classify(name) %>Actions.load<%= classify(name) %>ByIdFailure({ error: err.message }))
          )
        )
      )
    )
  );

  add$ = createEffect(() =>
    this.actions$.pipe(
      ofType(<%= classify(name) %>Actions.add<%= classify(name) %>),
      mergeMap(action =>
        this.service.create(action.data).pipe(
          map(data => <%= classify(name) %>Actions.add<%= classify(name) %>Success({ data })),
          catchError(err =>
            of(<%= classify(name) %>Actions.add<%= classify(name) %>Failure({ error: err.message }))
        )
      )
    )
  ));

  update$ = createEffect(() =>
    this.actions$.pipe(
      ofType(<%= classify(name) %>Actions.update<%= classify(name) %>),
      mergeMap(action =>
        this.service.update(action.id, action.data).pipe(
          mergeMap(() => this.service.getById(action.id)),
          map(data => <%= classify(name) %>Actions.update<%= classify(name) %>Success({ data })),
          catchError(err =>
            of(<%= classify(name) %>Actions.update<%= classify(name) %>Failure({ error: err.message }))
        )
      )
    )
  ));

  delete$ = createEffect(() =>
    this.actions$.pipe(
      ofType(<%= classify(name) %>Actions.delete<%= classify(name) %>),
      mergeMap(action =>
        this.service.delete(action.id).pipe(
          map(() => <%= classify(name) %>Actions.delete<%= classify(name) %>Success({ id: action.id })),
          catchError(err =>
            of(<%= classify(name) %>Actions.delete<%= classify(name) %>Failure({ error: err.message }))
        )
      )
    )
  ));
}
