import { Component, OnInit } from '@angular/core';
import { Store } from '@ngrx/store';
import { Observable, firstValueFrom } from 'rxjs';
import { {{ classify name }}Dto } from '../../models/{{ dasherize name }}.model';
import * as {{ classify name }}Actions from '../../store/actions/{{ dasherize name }}.actions';
import * as {{ classify name }}Selectors from '../../store/selectors/{{ dasherize name }}.selectors';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-{{ dasherize name }}-list',
  templateUrl: './{{ dasherize name }}-list.component.html',
  styleUrls: ['./{{ dasherize name }}-list.component.scss'],
  standalone: false,
})
export class {{ classify name }}ListComponent implements OnInit {
  items$!: Observable<{{ classify name }}Dto[]>;
  loading$!: Observable<boolean>;
  error$!: Observable<string | null>;
  currentPage$!: Observable<number>;
  totalPages$!: Observable<number>;

  constructor(private store: Store, private router: Router, private route: ActivatedRoute) { }

  ngOnInit() {
    this.selectState();
    this.loadDataFromStore();
  }

  selectState() {
    this.items$ = this.store.select({{ classify name }}Selectors.selectAll{{ classify name }}s);
    this.loading$ = this.store.select({{ classify name }}Selectors.select{{ classify name }}Loading);
    this.error$ = this.store.select({{ classify name }}Selectors.select{{ classify name }}Error);
    this.currentPage$ = this.store.select({{ classify name }}Selectors.select{{ classify name }}CurrentPage);
    this.totalPages$ = this.store.select({{ classify name }}Selectors.select{{ classify name }}TotalPages);
  }

  async nextPage() {
    const limit = await firstValueFrom(this.store.select({{ classify name }}Selectors.select{{ classify name }}Limit));
    const offset = await firstValueFrom(this.store.select({{ classify name }}Selectors.select{{ classify name }}Offset));
    this.store.dispatch({{ classify name }}Actions.load{{ classify name }}s({
      limit,
      offset: offset + limit
    }));
  }

  async prevPage() {
    const limit = await firstValueFrom(this.store.select({{ classify name }}Selectors.select{{ classify name }}Limit));
    const offset = await firstValueFrom(this.store.select({{ classify name }}Selectors.select{{ classify name }}Offset));
    const newOffset = offset - limit >= 0 ? offset - limit : 0;
    this.store.dispatch({{ classify name }}Actions.load{{ classify name }}s({
      limit,
      offset: newOffset
    }));
  }

  viewDetails(id: string) {
    this.router.navigate([id], { relativeTo: this.route }); // 👈 ใช้ path แบบ relative
  }

  viewAdd() {
    console.log("add click");
    this.router.navigate(['add'], { relativeTo: this.route }); // 👈 ใช้ path แบบ relative
  }

  async refresh(event: any) {
    const limit = await firstValueFrom(this.store.select({{ classify name }}Selectors.select{{ classify name }}Limit));
    this.store.dispatch({{ classify name }}Actions.load{{ classify name }}s({ limit, offset: 0 }));
    setTimeout(() => {
      event.target.complete();
    }, 500);
  }

  private loadDataFromStore() {
    this.store.dispatch({{ classify name }}Actions.load{{ classify name }}s({}));
  }
}
