import { createReducer, on } from '@ngrx/store';
import * as {{ classify_name }}Actions from '../actions/{{ dasherize_name }}.actions';
import {
  adapter,
  initialState,
  {{ classify_name }}State
} from '../state/{{ dasherize_name }}.state';

export const {{ dasherize_name }}Reducer = createReducer(
  initialState,

  // 🔁 Load All
  on({{ classify_name }}Actions.load{{ classify_name }}s, (state, { limit, offset }) => ({
    ...state,
    loading: true,
    limit: limit ?? state.limit,
    offset: offset ?? state.offset,
    currentPage:
      limit && offset !== undefined ? Math.floor(offset / limit) + 1 : state.currentPage,
  })),

  on({{ classify_name }}Actions.load{{ classify_name }}sSuccess, (state, { data, total }) =>
    adapter.setAll(data, {
      ...state,
      loading: false,
      total,
    })
  ),

  on({{ classify_name }}Actions.load{{ classify_name }}sFailure, (state, { error }) => ({
    ...state,
    loading: false,
    error,
  })),

  // 🔍 Load By ID
  on({{ classify_name }}Actions.load{{ classify_name }}ById, (state, { id }) => ({
    ...state,
    loading: true,
    selectedId: id.toString(),
  })),

  on({{ classify_name }}Actions.load{{ classify_name }}ByIdSuccess, (state, { data }) =>
    adapter.upsertOne(data, {
      ...state,
      loading: false,
      error: null,
    })
  ),

  on({{ classify_name }}Actions.load{{ classify_name }}ByIdFailure, (state, { error }) => ({
    ...state,
    loading: false,
    error,
  })),

  // ➕ Add
  on({{ classify_name }}Actions.add{{ classify_name }}Success, (state, { data }) =>
    adapter.addOne(data, state)
  ),

  // ✏️ Update
  on({{ classify_name }}Actions.update{{ classify_name }}Success, (state, { data }) =>
    adapter.updateOne({ id: data.id, changes: data }, state)
  ),

  // ❌ Delete
  on({{ classify_name }}Actions.delete{{ classify_name }}Success, (state, { id }) =>
    adapter.removeOne(id, state)
  )
);
