import { createFeatureSelector, createSelector } from '@ngrx/store';
import { {{ classify_name }}State, selectAll } from '../reducers/{{ dasherize_name }}.reducer';

export const select{{ classify_name }}State = createFeatureSelector<{{ classify_name }}State>('{{ classify_name }}');

// ðŸŒŸ Entity Selectors
export const selectAll{{ classify_name }}s = createSelector(
  select{{ classify_name }}State,
  selectAll
);

export const select{{ classify_name }}Loading = createSelector(
  select{{ classify_name }}State,
  state => state.loading
);

export const select{{ classify_name }}Error = createSelector(
  select{{ classify_name }}State,
  state => state.error
);

export const select{{ classify_name }}Total = createSelector(
  select{{ classify_name }}State,
  state => state.total
);

// âœ… Offset / Limit / Page
export const select{{ classify_name }}Offset = createSelector(
  select{{ classify_name }}State,
  state => state.offset
);

export const select{{ classify_name }}Limit = createSelector(
  select{{ classify_name }}State,
  state => state.limit
);

export const select{{ classify_name }}CurrentPage = createSelector(
  select{{ classify_name }}State,
  state => state.currentPage
);

// âœ… Total Pages
export const select{{ classify_name }}TotalPages = createSelector(
  select{{ classify_name }}Total,
  select{{ classify_name }}Limit,
  (total, limit) => Math.ceil(total / limit)
);

// âœ… Select by ID (dynamic)
export const select{{ classify_name }}ById = (id: string) =>
  createSelector(select{{ classify_name }}State, state => state.entities[id]);

// âœ… Filtered (Predicate)
export const select{{ classify_name }}Where = (predicate: (g: any) => boolean) =>
  createSelector(selectAll{{ classify_name }}s, all => all.filter(predicate));

// âœ… Slice / Paged (for optional manual slicing)
export const select{{ classify_name }}Paged = (limit: number, offset: number) =>
  createSelector(selectAll{{ classify_name }}s, all => all.slice(offset, offset + limit));


// ðŸ†• âœ… Select current selectedId
export const select{{ classify_name }}SelectedId = createSelector(
  select{{ classify_name }}State,
  state => state.selectedId
);

// ðŸ†• âœ… Select current selected item (for details view)
export const selectSelected{{ classify_name }} = createSelector(
  select{{ classify_name }}State,
  select{{ classify_name }}SelectedId,
  (state, selectedId) => selectedId ? state.entities[selectedId] ?? null : null
);
